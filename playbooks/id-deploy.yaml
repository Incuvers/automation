---
- name: Setup IRIS Deployment Server
  hosts: deploy

  vars_files:
    - id-vars.yaml

  pre_tasks:
    - name: Update apt cache and install apt packages
      become: true
      apt:
        name:
          - python3-pip
          - libffi-dev
          - libssl-dev
          - apt-transport-https
          - ca-certificates
          - software-properties-common
        state: present
        update_cache: true

    - name: Install pip packages for ansible modules
      become: true
      pip:
        name:
          - pexpect

    - name: Set hostname
      become: true
      hostname:
        name: "{{ hostname }}"

    # use wait_for to validate github servers can be reached from the target node
    - name: Validate connection to github.com servers
      wait_for:
        host: "{{ item }}"
        port: 80
        timeout: 30
        active_connection_states: ESTABLISHED
      with_items: "{{ github_servers }}"

    # create install directory in /opt
    - name: Setup github actions directory
      become: true
      file:
        path: "{{ actions_runner }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0777

  tasks:
    - name: Add Docker GPG apt Key
      become: true
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      become: true
      apt_repository:
        repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker-ce
      become: true
      apt:
        name:
          - docker-ce
        state: latest

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Apply usermod to append docker group
      become: true
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Download github actions runner
      get_url:
        url: "https://github.com/actions/runner/releases/download/v{{ gar_version }}/actions-runner-linux-{{ arch }}-{{ gar_version }}.tar.gz"
        dest: "{{ download_dir }}/gar-{{ gar_version }}.tgz"
        checksum: "{{ gar_checksum }}"

    - name: Extract github actions runner
      unarchive:
        src: "{{ download_dir }}/gar-{{ gar_version }}.tgz"
        dest: "{{ actions_runner }}"
        remote_src: true
        mode: 0777
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        creates: "{{ actions_runner }}/README.md"

    - name: Generate Github Actions Runner token
      uri:
        url: "{{ github_base_path }}/orgs/{{ organization }}/actions/runners/registration-token"
        method: POST
        headers:
          Authorization: "token {{ pa_token }}"
          Accept: application/vnd.github.v3+json
        status_code: 201
      register: runner_token

    - name: Configure actions runner
      expect:
        command: >
          {{ actions_runner }}/config.sh --url {{ organization_url }} --token {{ runner_token.json.token }}
        responses:
          (.*)Enter the name of runner:(.*): ""
          (.*)Enter any additional labels \(ex. label-1,label-2\):(.*): "{{ tag }}"
          (.*)Enter name of work folder:(.*): "{{ gar_work_folder }}"
          (.*)Would you like to replace the existing runner? (Y/N)(.*): ""
      ignore_errors: true

    - name: Install github actions runner
      become: true
      command: >
        chdir="{{ actions_runner }}" ./svc.sh install

    - name: Start github actions runner service
      become: true
      command: >
        chdir="{{ actions_runner }}" ./svc.sh start

  post_tasks:
    - name: Clean build artefacts
      file:
        state: absent
        path: "{{ download_dir }}/gar-{{ gar_version }}.tgz"

    - name: Reboot
      become: true
      reboot:

    - name: Verify actions runner service
      service:
        name: "actions.runner.{{ organization }}.{{ hostname }}.service"
        state: started
