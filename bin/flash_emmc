#!/bin/bash

OKGREEN='\033[92m'
# WARNING='\033[93m'
# FAIL='\033[91m'
OKBLUE='\033[94m'
UNDERLINE='\033[4m'
ENDC='\033[0m'

set -e

echo -e "${UNDERLINE} Please verify the following: ${ENDC}"
echo " 1. The turingpi is ON"
echo " 2. The turingpi USB flash slave jumper is set"
echo " 3. This local machine is connected to the slave micro usb flash port."

read -rp "Press any key to continue ..."

echo -e "${OKBLUE}Starting eMMC Flashing Service ${ENDC}"

echo "Initiating bootloader ... "
cd usbboot || exit
echo "Insert compute module into master SO-DIMM"
sudo ./rpiboot -v
cd ..
echo -e "${OKGREEN} ✓ ${ENDC} complete"

sleep 2
diskutil list
read -rp 'Specify disk write location (ie /dev/disk2): ' disk
echo "Unmounting $disk ..."
diskutil unmountDisk "$disk"
echo -e "${OKGREEN} ✓ ${ENDC} complete"

cd build || exit
img=$(echo -- *'.img'*)
echo "Flashing $img to $disk ..."
pv "$img" | sudo dd bs=1m of="$disk"
echo -e "${OKGREEN} ✓ ${ENDC} complete"
cd - || exit

read -rp "Would you like to setup ssh key authorization with your machine to this node? (y/n)" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Finding public ssh key ... "
    # assignment and declaration seperate to maintain set -e and traps.
    key=$(< ~/.ssh/id_rsa.pub)
    export PUB_SSH="$key"
    echo -e "${OKGREEN} ✓ ${ENDC} complete"
    yaml='.user-data-auth-ssh.yaml'
else
    echo "Skipping ssh authorization setup"
    yaml='user-data.yaml'
fi
echo "Configuring user data template ... "
python src/yaml_parser.py "./src/templates/$yaml"
echo -e "${OKGREEN} ✓ ${ENDC} complete"
cfg_path='/Volumes/HypriotOS/user-data'
echo "Copying to $cfg_path ... "
cp "$BUILD/user-data" "$cfg_path"
echo -e "${OKGREEN} ✓ ${ENDC} complete"

diskutil unmountDisk "$disk"

echo -e "${OKGREEN} ✓ ${ENDC} Completed eMMC Flashing Service"