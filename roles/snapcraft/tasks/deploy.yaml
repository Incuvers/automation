---
# update apt cache and install
- name: Update apt cache and install apt packages
  become: true
  apt:
    name:
      - python3-pip
    state: present
    update_cache: true

# install required pip packages (pexpect for ansible)
- name: Install pip packages for ansible modules
  become: true
  pip:
    name:
      - pexpect
      - boto3

# snapcraft install is a seperate task due to its strict channel and confinement parameters
- name: Install snapcraft
  become: true
  snap:
    name:
      - snapcraft
    classic: true
    channel: candidate

# validate lxd install
- name: Install lxd
  become: true
  snap:
    name:
      - lxd
    channel: stable

# ensure no overwrite conflict for ssh-keygen
- name: Remove pre-existing RSA deploy keys (if any)
  become: true
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /home/ubuntu/.ssh/monitor_deploy_key.pub
    - /home/ubuntu/.ssh/monitor_deploy_key
    - /home/ubuntu/.ssh/icb_deploy_key
    - /home/ubuntu/.ssh/icb_deploy_key.pub

# generate deployment key pairs for icb and monitor repositories
- name: Generate RSA deploy keys
  command: ssh-keygen -b 4096 -t rsa -f /home/ubuntu/.ssh/"{{ item }}"_deploy_key -q -N ""
  args:
    creates:
      - /home/ubuntu/.ssh/{{ item }}_deploy_key.pub
      - /home/ubuntu/.ssh/{{ item }}_deploy_key
  with_items:
    - monitor
    - icb

# read deploy keys for git api payload generation (later step)
- name: Read and encode deploy keys
  slurp:
    src: "{{ item }}"
  register: deploy_keys
  loop:
    - /home/ubuntu/.ssh/monitor_deploy_key.pub
    - /home/ubuntu/.ssh/icb_deploy_key.pub

# copy ssh config for lxd to interpret key aliases
- name: Copy ssh config for key alias
  copy:
    src: config
    dest: /home/ubuntu/.ssh/config
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644

# autoconfigure lxd with defaults
- name: Configure lxd
  become: true
  command: lxd init --auto

# ensure lxd group exists
- name: Ensure 'lxd' group is present 
  group:
    name: lxd
    state: present

# equivalent to: `usermod -aG lxd {{ ansible_user }}`
- name: Append 'lxd' to ansible users group
  become: true
  user:
    name: "{{ ansible_user }}"
    groups: lxd
    append: true

# use wait_for to validate github servers can be reached from the target node
- name: Validate connection to github.com servers
  wait_for:
    host: "{{ item }}"
    port: 80
    timeout: 30
    active_connection_states: ESTABLISHED
  with_items: "{{ github_servers }}"


# generate the deploy key creation payloads and post to gits rest api
- name: Add deploy keys to Incuvers:monitor and Incuvers:icb repositories
  uri:
    url: "{{ item.url }}"
    method: POST
    headers:
      Authorization: "token {{ pa_token }}"
      Accept: application/vnd.github.v3+json
    body: "{{ item.body }}"
    body_format: json
    status_code: 201
  with_items:
    - url: "{{ github_base_path }}/repos/{{ organization }}/monitor/keys"
      body:
        title: "snap build server"
        key: "{{ deploy_keys['results'][0]['content'] | b64decode }}"
        read_only: true
    - url: "{{ github_base_path }}/repos/{{ organization }}/icb/keys"
      body:
        title: "snap build server"
        key: "{{ deploy_keys['results'][1]['content'] | b64decode }}"
        read_only: tru